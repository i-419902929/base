 添加图片
   viewer.entities.add({
      position: Cesium.Cartesian3.fromDegrees(110.20, 34.55, 2.61),
      billboard: {
        // 图像地址，URI或Canvas的属性
        image: '/location.png',
        // 设置颜色和透明度
        color: Cesium.Color.WHITE.withAlpha(0.8),
        // 高度（以像素为单位）
        height: 50,
        // 宽度（以像素为单位）
        width: 50,
        // 逆时针旋转
        rotation: 20,
        // 大小是否以米为单位
        sizeInMeters: false,
        // 相对于坐标的垂直位置
        verticalOrigin: Cesium.VerticalOrigin.CENTER,
        // 相对于坐标的水平位置
        horizontalOrigin: Cesium.HorizontalOrigin.LEFT,
        // 该属性指定标签在屏幕空间中距此标签原点的像素偏移量
        pixelOffset: new Cesium.Cartesian2(10, 0),
        // 应用于图像的统一比例。比例大于会1.0放大标签，而比例小于会1.0缩小标签。
        scale: 1.0,
        // 显示在距相机的距离处的属性，多少区间内是可以显示的
        distanceDisplayCondition: new Cesium.DistanceDisplayCondition(0, 1500),
        // 是否显示
        show: true
      }
    });
添加模型
viewer.entities.add({
      // 设置方向
      orientation: orientation,
      position: Cesium.Cartesian3.fromDegrees(120, 30, 10000),
      model: {
        // 引入模型
        uri: '/SampleData/models/CesiumAir/Cesium_Air.glb',
        // 模型的近似最小像素大小，而不考虑缩放。这可以用来确保即使观看者缩小也可以看到模型。如果为0.0，则不强制使用最小大小
        minimumPixelSize: 1280,
        // 模型的颜色（与模型的渲染颜色混合的属性）
        color: Cesium.Color.WHITE.withAlpha(1),
        // 模型的最大比例大小
        maximumScale: 20000,
        // 设置模型轮廓（边框）颜色
        silhouetteColor: Cesium.Color.BLACK,
        // 设置模型轮廓（边框）大小
        silhouetteSize: 2,
        // 是否执行模型动画
        runAnimations: true,
        // 应用于图像的统一比例。比例大于会1.0放大标签，而比例小于会1.0缩小标签。
        scale: 1.0,
        // 显示在距相机的距离处的属性，多少区间内是可以显示的
        distanceDisplayCondition: new Cesium.DistanceDisplayCondition(0, 1500),
        // 是否显示
        show: true
      }
    });

添加文字
viewer.entities.add({
      position: Cesium.Cartesian3.fromDegrees(120, 30, 5),
      // 点
      point: {
        color: Cesium.Color.RED, // 点位颜色
        pixelSize: 10 // 像素点大小
      },
      // 文字
      label: {
        // 文本。支持显式换行符“ \ n”
        text: '测试名称',
        // 字体样式，以CSS语法指定字体
        font: '14pt Source Han Sans CN',
        // 字体颜色
        fillColor: Cesium.Color.BLACK,
        // 背景颜色
        backgroundColor: Cesium.Color.AQUA,
        // 是否显示背景颜色
        showBackground: true,
        // 字体边框
        outline: true,
        // 字体边框颜色
        outlineColor: Cesium.Color.WHITE,
        // 字体边框尺寸
        outlineWidth: 10,
        // 应用于图像的统一比例。比例大于会1.0放大标签，而比例小于会1.0缩小标签。
        scale: 1.0,
        // 设置样式：FILL：填写标签的文本，但不要勾勒轮廓；OUTLINE：概述标签的文本，但不要填写；FILL_AND_OUTLINE：填写并概述标签文本。
        style: Cesium.LabelStyle.FILL_AND_OUTLINE,
        // 相对于坐标的水平位置
        verticalOrigin: Cesium.VerticalOrigin.CENTER,
        // 相对于坐标的水平位置
        horizontalOrigin: Cesium.HorizontalOrigin.LEFT,
        // 该属性指定标签在屏幕空间中距此标签原点的像素偏移量
        pixelOffset: new Cesium.Cartesian2(10, 0),
        // 显示在距相机的距离处的属性，多少区间内是可以显示的
        distanceDisplayCondition: new Cesium.DistanceDisplayCondition(0, 1500),
        // 是否显示
        show: true
      }
    });
添加线段
 viewer.entities.add({
      polyline: {
        // fromDegrees返回给定的经度和纬度值数组（以度为单位），该数组由Cartesian3位置组成。
        // Cesium.Cartesian3.fromDegreesArray([经度1, 纬度1, 经度2, 纬度2,])
        // Cesium.Cartesian3.fromDegreesArrayHeights([经度1, 纬度1, 高度1, 经度2, 纬度2, 高度2])
        positions: Cesium.Cartesian3.fromDegreesArray([
          120.9677706, 30.7985748,
          110.20, 34.55
        ]),
        // 宽度
        width: 2,
        // 线的颜色
        material: Cesium.Color.WHITE,
        // 线的顺序,仅当`clampToGround`为true并且支持地形上的折线时才有效。
        zIndex: 10,
        // 显示在距相机的距离处的属性，多少区间内是可以显示的
        distanceDisplayCondition: new Cesium.DistanceDisplayCondition(0, 1500),
        // 是否显示
        show: true
      }
    });
初始化地图
 Cesium.Ion.defaultAccessToken = 'cesium官网申请的token'
 
 // cesium原生 生成地形
    let terrainProvider = Cesium.createWorldTerrain({
        requestWaterMask: false, // 否需要请求额外的水
        requestVertexNormals: false // 光数据
    })
    // 创建map配置项
    const mapOptions = {
        homeButton: false, //是否显示主页按钮
        sceneModePicker: false, //是否显示场景按钮
        baseLayerPicker: false, //是否显示图层选择控件
        navigationHelpButton: false, //导航帮助按钮
        selectionIndicator: false, //鼠标选择指示器
        infoBox: false, //信息提示框
        animation: false, //是否创建动画小器件，左下角仪表
        timeline: false, //是否显示时间线控件
        geocoder: false, //是否显示地名查找控件
        fullscreenButton: true, //是否全屏按钮
        shouldAnimate: false, 
        destination: {
            x: 110.220501,
            y: 24.387122,
            z: 350,
        },
        orientation: [0, -90, 0],
        infoBox: false, // If set to false, the InfoBox widget will not be created.
        terrainProvider, // 在viewer配置项中添加地形数据
    }
    const viewer = new Cesium.Viewer('cesiumContainer', mapOptions);
    
    viewer._cesiumWidget._creditContainer.style.display = "none" // 去除版权信息
 viewer.scene.screenSpaceCameraController.minimumZoomDistance = 10 // 距离地形的距离
 viewer.scene.globe.depthTestAgainstTerrain = true // false 关闭/打开地形遮挡
 
 
    // viewer.imageryLayers.remove(viewer.imageryLayers.get(0)); // 删除默认的影像图层
    
    viewer.scene.fxaa = false;//改善实体图片清晰度，去除图片锯齿
    viewer.scene.postProcessStages.fxaa.enabled = true;去锯齿 使文字清晰
    if (Cesium.FeatureDetection.supportsImageRenderingPixelated()) {
      // 判断是否支持图像渲染像素化处理
      viewer.resolutionScale = window.devicePixelRatio;
    }

    // //加载本地地图
    // this.loadJPGMercator(viewer, 15);
    // //加载本地地形
    // this.loadLocalTerrain(viewer)

   // viewer.extend(Cesium.viewerCesiumInspectorMixin)  // 调试器 Cesium的Inspector面板可以显示Primitive的坐标轴、边界球等信息,还可以显示网格坐标系信息
    // viewer.extend(Cesium.viewerCesium3DTilesInspectorMixin); // 3dtiles插件 可以查看模型信息
    
    //设置指北针
    var options = {};
    // 用于在使用重置导航重置地图视图时设置默认视图控制。接受的值是Cesium.Cartographic 和 Cesium.Rectangle.
    options.defaultResetView = Cesium.Cartographic.fromDegrees(
      homePosition.lon,
      homePosition.lat,
      homePosition.height
    );
    // 用于启用或禁用罗盘。true是启用罗盘，false是禁用罗盘。默认值为true。如果将选项设置为false，则罗盘将不会添加到地图中。
    options.enableCompass = true;
    // 用于启用或禁用缩放控件。true是启用，false是禁用。默认值为true。如果将选项设置为false，则缩放控件将不会添加到地图中。
    options.enableZoomControls = false;
    // 用于启用或禁用距离图例。true是启用，false是禁用。默认值为true。如果将选项设置为false，距离图例将不会添加到地图中。
    options.enableDistanceLegend = false;
    // 用于启用或禁用指南针外环。true是启用，false是禁用。默认值为true。如果将选项设置为false，则该环将可见但无效。
    options.enableCompassOuterRing = true;
    // 利用插件
    CesiumNavigation(viewer, options);

加载模型2
const initMap = () => {
      viewer = new Cesium.Viewer("cesiumMap", {
        baseLayerPicker: false, // 地图选择
        geocoder: false, //是否显示地名查找控件
        homeButton: true,
        sceneModePicker: true, //是否显示投影方式控件（2D、2.5D、3D展示方式切换）
        selectionIndicator: false,
        baseLayerPicker: false, //是否显示图层选择控件
        navigationHelpButton: false, //是否显示帮助信息控件
        animation: false, // 是否显示动画控件
        // creditContainer: "credit",
        timeline: false, //是否显示时间线控件
        fullscreenButton: false,
        vrButton: false,
        infoBox: false, //是否显示点击要素之后显示的信息
        // requestRenderMode: true, //启用请求渲染模式
        scene3DOnly: false, //每个几何实例将只能以3D渲染以节省GPU内存,设置为true,2、3维切换按钮将被隐藏
        // sceneMode: 3, //初始场景模式 1 2D模式 2 2D循环模式 3 3D模式  Cesium.SceneMode
        imageryProvider: new Cesium.WebMapTileServiceImageryProvider({
          url: "http://t0.tianditu.gov.cn/img_w/wmts?tk=b6b320a7ccfabfdc30536330efc07f3e",
          layer: "img",
          style: "default",
          tileMatrixSetID: "w",
          format: "tiles",
          maximumLevel: 18,
        }),
      });
      window.viewer = viewer;
      window.viewer._cesiumWidget._creditContainer.style.display = "none";
      window.viewer.scene.globe.depthTestAgainstTerrain = false; //图标被遮挡
      window.viewer.scene.fxaa = false;

      // 设置后当相机高度达到设置的最大和最小高度时将不再放大和缩小
      window.viewer.scene.screenSpaceCameraController.minimumZoomDistance = 0; //相机的高度的最小值
      window.viewer.scene.screenSpaceCameraController.maximumZoomDistance = 20000000; //相机高度的最大值

      // 关闭双击事件
      window.viewer.cesiumWidget.screenSpaceEventHandler.removeInputAction(
        Cesium.ScreenSpaceEventType.LEFT_DOUBLE_CLICK
      );
      viewer.camera.flyTo({
        destination: Cesium.Cartesian3.fromDegrees(112.98242, 22.87485, 100000),
        orientation: {
          heading: Cesium.Math.toRadians(0), // 水平偏角，默认正北 0
          pitch: Cesium.Math.toRadians(-90), // 俯视角，默认-90，垂直向下
          roll: 0, // 旋转角
        },
      });
    };